// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  userId         String      @id @default(uuid())
  googleId       String?     @unique
  username       String      @unique
  email          String      @unique
  profilePic     String?
  bio            String?
  createdAt      DateTime    @default(now())
  followersCount Int         @default(0)
  followingCount Int         @default(0)
  role           String      @default("member")
  star           Int         @default(0)
  isBanned       Boolean     @default(false)
  banReason      String?
  bannedBy       String?

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  followers      Follow[] @relation("Following")
  following      Follow[] @relation("Follower")

  notifications      Notification[] @relation("UserNotifications")
  actedNotifications Notification[] @relation("ActorNotifications")

  // Relations for ban functionality
  bannedUsers User[] @relation("BannedBy")
  bannedByUser User? @relation("BannedBy", fields: [bannedBy], references: [userId])

  @@map("users")
}

model Post {
  postId        String    @id @default(uuid())
  userId        String
  title         String
  description   String?
  content       String? 
  category      String
  mediaUrl      String?
  viewsCount    Int       @default(0)
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  sharesCount   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
  isPublished   Boolean   @default(false)
  
  author   User      @relation(fields: [userId], references: [userId])
  comments Comment[]
  likes    Like[]
  sections ContentSection[]

  @@map("posts")
}

model Comment {
  commentId String    @id @default(uuid())
  postId    String
  userId    String
  content   String
  likesCount Int     @default(0)
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  parentId  String?

  post   Post   @relation(fields: [postId], references: [postId])
  author User   @relation(fields: [userId], references: [userId])
  likes  Like[]
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [commentId])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  likeId    String    @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  likeType  String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [userId])
  post    Post?    @relation(fields: [postId], references: [postId])
  comment Comment? @relation(fields: [commentId], references: [commentId])

  @@map("likes")
}

model Follow {
  followId    String    @id @default(uuid())
  followerId  String
  followingId String
  followedAt  DateTime @default(now())
  isActive    Boolean  @default(true)

  follower  User @relation("Follower", fields: [followerId], references: [userId])
  following User @relation("Following", fields: [followingId], references: [userId])
  
  @@unique([followerId, followingId])
  @@map("followers")
}

model Message {
  messageId  String    @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  mediaUrl   String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  isDeleted  Boolean  @default(false)
  
  sender   User @relation("SentMessages", fields: [senderId], references: [userId])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [userId])

  @@map("messages")
}

model Notification {
  notifId   String    @id @default(uuid())
  userId    String?
  actorId   String
  type      String
  content   String?
  actionUrl String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user  User? @relation("UserNotifications", fields: [userId], references: [userId])
  actor User @relation("ActorNotifications", fields: [actorId], references: [userId])

  @@map("notifications")
}

model ContentSection {
  sectionId   String    @id @default(uuid())
  type        String
  content     String?
  src         String?
  imageDetail   String[]
  order       Int
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  post        Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@map("content_sections")
}
